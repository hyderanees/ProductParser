# Generated by Django 2.2 on 2020-10-18 05:52

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Brands',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(default='')),
                ('reference_id', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Categories',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(default='')),
                ('reference_id', models.IntegerField()),
                ('products_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='CronJobLogRunning',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cron_job_type', models.IntegerField(default=0)),
                ('scanned_sku', models.IntegerField(default=0)),
                ('changed_prices', models.IntegerField(default=0)),
                ('new_sku', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProductCalculationInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('local_cost_supplier', models.FloatField(default=0.0)),
                ('thenx_cost_supplier', models.FloatField(default=0.0)),
                ('all_cost_price', models.FloatField(default=0.0)),
                ('whole_sale_margin', models.FloatField(default=0)),
                ('retail_margin', models.FloatField(default=0)),
                ('whole_sale_price', models.FloatField(default=0.0)),
                ('gross_profit_whole_sale', models.FloatField(default=0.0)),
                ('retail_sale_price', models.FloatField(default=0.0)),
                ('gross_profit_retail_sale', models.FloatField(default=0.0)),
                ('vat', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProductCompetitorSites',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference_id', models.IntegerField(default=0)),
                ('name', models.TextField(default='')),
            ],
        ),
        migrations.CreateModel(
            name='Products',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(default='')),
                ('sku', models.TextField(default='')),
                ('reference_id', models.IntegerField()),
                ('price', models.FloatField(default=0.0)),
                ('url', models.TextField(default='')),
                ('cost', models.FloatField(default=0.0)),
                ('quantity', models.IntegerField(default=0)),
                ('is_platform_price_set', models.BooleanField(default=False)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
                ('brand', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='products.Brands')),
                ('categories', models.ManyToManyField(to='products.Categories')),
            ],
        ),
        migrations.CreateModel(
            name='Rules',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rule_type', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Suppliers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(default='')),
                ('reference_id', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='WarrantyRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('days', models.IntegerField(default=1)),
                ('is_all_suppliers', models.BooleanField(default=False)),
                ('is_all_categories', models.BooleanField(default=False)),
                ('is_on_product', models.BooleanField(default=False)),
                ('is_on_category', models.BooleanField(default=True)),
                ('category', models.ManyToManyField(to='products.Categories')),
                ('product_sku', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='products.Products')),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.Rules')),
                ('supplier', models.ManyToManyField(to='products.Suppliers')),
            ],
        ),
        migrations.CreateModel(
            name='VatRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentage', models.FloatField(default=0)),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.Rules')),
            ],
        ),
        migrations.CreateModel(
            name='ThenxCostSupplier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cost', models.FloatField(default=0)),
                ('percentage', models.FloatField(default=0.0)),
                ('price_dependancey', models.FloatField(default=0.0)),
                ('cost_unit', models.IntegerField(default=1)),
                ('percentage_unit', models.IntegerField(default=1)),
                ('supplier_price_higher_check', models.BooleanField(default=False)),
                ('is_all_suppliers', models.BooleanField(default=False)),
                ('is_all_categories', models.BooleanField(default=False)),
                ('is_on_product', models.BooleanField(default=False)),
                ('is_on_category', models.BooleanField(default=True)),
                ('category', models.ManyToManyField(to='products.Categories')),
                ('product_sku', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='products.Products')),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.Rules')),
                ('supplier', models.ManyToManyField(to='products.Suppliers')),
            ],
        ),
        migrations.CreateModel(
            name='SupplierDetailPrices',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('local_cost', models.FloatField(default=7.0)),
                ('local_cost_thenx', models.FloatField(default=2)),
                ('vat_price', models.FloatField(default=2)),
                ('whole_sale_price_margin', models.FloatField(default=0.0)),
                ('retail_sale_price_margin', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
                ('supplier', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='products.Suppliers')),
            ],
        ),
        migrations.AddField(
            model_name='products',
            name='supplier',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='products.Suppliers'),
        ),
        migrations.CreateModel(
            name='ProductCompetitorsLinks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.TextField(default='')),
                ('product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='products.Products')),
                ('site_reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.ProductCompetitorSites')),
            ],
        ),
        migrations.CreateModel(
            name='ProductCompetitorSitesReference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.TextField(default='')),
                ('old_price', models.TextField(default='')),
                ('comp_price', models.TextField(default='')),
                ('promotion_price', models.TextField(default='')),
                ('stock_entry', models.TextField(default='')),
                ('is_error', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('competitor_link', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='products.ProductCompetitorsLinks')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.Products')),
                ('site_reference', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='products.ProductCompetitorSites')),
            ],
        ),
        migrations.CreateModel(
            name='ProductCalculationInformationFormulas',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('local_cost_value', models.FloatField(default=0.0)),
                ('local_cost_price_type', models.IntegerField(default=1)),
                ('thenx_cost_value', models.FloatField(default=0.0)),
                ('thenx_cost_price_type', models.IntegerField(default=1)),
                ('whole_sale_price', models.FloatField(default=0.0)),
                ('whole_sale_price_type', models.IntegerField(default=1)),
                ('retail_sale_price', models.FloatField(default=0.0)),
                ('retail_sale_price_type', models.IntegerField(default=1)),
                ('pro_cal_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.ProductCalculationInformation')),
            ],
        ),
        migrations.AddField(
            model_name='productcalculationinformation',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.Products'),
        ),
        migrations.CreateModel(
            name='PriceCompetitorRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_pricer', models.FloatField(default=0)),
                ('check_pricer_unit', models.IntegerField(default=1)),
                ('check_pricer_priority', models.IntegerField(default=1)),
                ('competitor_priority', models.IntegerField(default=1)),
                ('is_all_competitors', models.BooleanField(default=False)),
                ('final_price_check', models.FloatField(default=0)),
                ('final_price_unit', models.IntegerField(default=1)),
                ('is_all_suppliers', models.BooleanField(default=False)),
                ('is_all_categories', models.BooleanField(default=False)),
                ('is_on_product', models.BooleanField(default=False)),
                ('is_on_category', models.BooleanField(default=True)),
                ('category', models.ManyToManyField(to='products.Categories')),
                ('competitor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='products.ProductCompetitorSites')),
                ('product_sku', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='products.Products')),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.Rules')),
                ('supplier', models.ManyToManyField(to='products.Suppliers')),
            ],
        ),
        migrations.CreateModel(
            name='MarginRules',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentage', models.FloatField(default=0)),
                ('percentage_unit', models.IntegerField(default=2)),
                ('type', models.IntegerField(default=0)),
                ('is_all_suppliers', models.BooleanField(default=False)),
                ('is_all_categories', models.BooleanField(default=False)),
                ('is_on_product', models.BooleanField(default=False)),
                ('is_on_category', models.BooleanField(default=True)),
                ('category', models.ManyToManyField(to='products.Categories')),
                ('product_sku', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='products.Products')),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.Rules')),
                ('supplier', models.ManyToManyField(to='products.Suppliers')),
            ],
        ),
        migrations.CreateModel(
            name='LogErrorWhileScraping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site_name', models.TextField(default='')),
                ('link', models.TextField(default='')),
                ('exception', models.TextField(default='')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('site_reference', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='products.ProductCompetitorSites')),
            ],
        ),
        migrations.CreateModel(
            name='LocalCostSupplier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cost', models.FloatField(default=0)),
                ('cost_unit', models.IntegerField(default=1)),
                ('percentage', models.FloatField(default=0.0)),
                ('percentage_unit', models.IntegerField(default=1)),
                ('price_dependancey', models.FloatField(default=0.0)),
                ('supplier_price_higher_check', models.BooleanField(default=False)),
                ('is_all_suppliers', models.BooleanField(default=False)),
                ('is_all_categories', models.BooleanField(default=False)),
                ('is_on_product', models.BooleanField(default=False)),
                ('is_on_category', models.BooleanField(default=True)),
                ('category', models.ManyToManyField(to='products.Categories')),
                ('product_sku', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='products.Products')),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.Rules')),
                ('supplier', models.ManyToManyField(to='products.Suppliers')),
            ],
        ),
        migrations.CreateModel(
            name='AdminLogOfJobToShow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_sku', models.TextField(default='')),
                ('product_cost', models.FloatField(default=0.0)),
                ('rank_of_product', models.IntegerField(default=0)),
                ('total_competitors_link', models.IntegerField(default=0)),
                ('cheapest_price', models.FloatField(default=0)),
                ('highest_price', models.FloatField(default=0)),
                ('average_price', models.FloatField(default=0)),
                ('cheapest_price_text', models.TextField(default='')),
                ('highest_price_text', models.TextField(default='')),
                ('average_price_text', models.TextField(default='')),
                ('product_price', models.FloatField(default=0.0)),
                ('expected_price', models.FloatField(default=0.0)),
                ('is_approved', models.BooleanField(default=False)),
                ('is_price_change', models.BooleanField(default=False)),
                ('is_valid', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('competitor_site_log', models.ManyToManyField(to='products.ProductCompetitorSitesReference')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.Products')),
            ],
        ),
    ]
